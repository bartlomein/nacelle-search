This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-16T19:46:02.723Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    Notification/
      NotificationContainer.tsx
      NotificationItem.test.tsx
      NotificationItem.tsx
    Search/
      Search.test.tsx
      Search.tsx
  hooks/
    useDebounce.tsx
  pages/
    NotificationPage.tsx
    SearchPage.tsx
  store/
    hooks.ts
    index.ts
    notificationSlice.ts
  App.css
  App.tsx
  index.css
  main.tsx
  setupTests.js
  vite-env.d.ts
.gitignore
babel.config.cjs
eslint.config.js
index.html
jest.config.cjs
jest.setup.ts
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
tsconfig.tsbuildinfo
vite.config.ts

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/Notification/NotificationContainer.tsx
================
import { AnimatePresence } from "framer-motion";
import { NotificationItem } from "./NotificationItem";
import { useAppSelector } from "../../store/hooks";

export const NotificationContainer = () => {
  const notifications = useAppSelector(
    (state) => state.notifications.notifications
  );

  return (
    <div className="fixed top-4 right-4 z-50 w-80">
      <AnimatePresence>
        {notifications.map((notification) => (
          <NotificationItem key={notification.id} {...notification} />
        ))}
      </AnimatePresence>
    </div>
  );
};

================
File: src/components/Notification/NotificationItem.test.tsx
================
// src/components/NotificationItem/NotificationItem.test.tsx
import { render, screen, fireEvent, act } from "@testing-library/react";
import { Provider } from "react-redux";
import { configureStore } from "@reduxjs/toolkit";
import notificationReducer, {
  removeNotification,
} from "../../store/notificationSlice";
import { NotificationItem } from "./NotificationItem";

jest.mock("framer-motion", () => ({
  motion: {
    div: ({ children, ...props }: any) => (
      <div data-testid="motion-div" {...props}>
        {children}
      </div>
    ),
  },
}));

describe("NotificationItem", () => {
  const createTestStore = () =>
    configureStore({
      reducer: {
        notifications: notificationReducer,
      },
    });

  beforeEach(() => {
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });

  it("renders with correct message and type", () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <NotificationItem id="test-id" message="Test message" type="success" />
      </Provider>
    );

    expect(screen.getByText("Test message")).toBeInTheDocument();
    expect(screen.getByTestId("motion-div")).toHaveClass("bg-green-500");
  });

  it("applies correct background color based on type", () => {
    const store = createTestStore();
    const { rerender } = render(
      <Provider store={store}>
        <NotificationItem id="test-id" message="Test message" type="error" />
      </Provider>
    );

    expect(screen.getByTestId("motion-div")).toHaveClass("bg-red-500");

    rerender(
      <Provider store={store}>
        <NotificationItem id="test-id" message="Test message" type="info" />
      </Provider>
    );

    expect(screen.getByTestId("motion-div")).toHaveClass("bg-blue-500");
  });

  it("dispatches removeNotification when close button is clicked", () => {
    const store = createTestStore();
    const mockDispatch = jest.spyOn(store, "dispatch");

    render(
      <Provider store={store}>
        <NotificationItem id="test-id" message="Test message" type="success" />
      </Provider>
    );

    const closeButton = screen.getByRole("button");
    fireEvent.click(closeButton);

    expect(mockDispatch).toHaveBeenCalledWith(removeNotification("test-id"));
  });

  it("auto-dismisses after 3 seconds", () => {
    const store = createTestStore();
    const mockDispatch = jest.spyOn(store, "dispatch");

    render(
      <Provider store={store}>
        <NotificationItem id="test-id" message="Test message" type="success" />
      </Provider>
    );

    expect(mockDispatch).not.toHaveBeenCalled();

    act(() => {
      jest.advanceTimersByTime(3000);
    });

    expect(mockDispatch).toHaveBeenCalledWith(removeNotification("test-id"));
  });

  it("cleans up timer on unmount", () => {
    const store = createTestStore();
    const mockDispatch = jest.spyOn(store, "dispatch");

    const { unmount } = render(
      <Provider store={store}>
        <NotificationItem id="test-id" message="Test message" type="success" />
      </Provider>
    );

    unmount();

    // Fast-forward time by 3 seconds
    act(() => {
      jest.advanceTimersByTime(3000);
    });

    // Verify the notification was not removed after unmount
    expect(mockDispatch).not.toHaveBeenCalled();
  });
});

================
File: src/components/Notification/NotificationItem.tsx
================
import { useEffect } from "react";
import { useAppDispatch } from "../../store/hooks";
import { removeNotification } from "../../store/notificationSlice";
import { motion } from "framer-motion";

export const NotificationItem = ({
  id,
  message,
  type,
}: {
  id: string;
  message: string;
  type: "success" | "error" | "info";
}) => {
  const dispatch = useAppDispatch();

  useEffect(() => {
    const timer = setTimeout(() => {
      dispatch(removeNotification(id));
    }, 3000);

    return () => clearTimeout(timer);
  }, [id, dispatch]);

  const getBackgroundColor = () => {
    switch (type) {
      case "success":
        return "bg-green-500";
      case "error":
        return "bg-red-500";
      case "info":
        return "bg-blue-500";
      default:
        return "bg-gray-500";
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, x: 100 }}
      transition={{ duration: 0.3 }}
      className={`${getBackgroundColor()} text-white p-4 rounded-md shadow-lg mb-2 flex justify-between items-center`}
    >
      <span>{message}</span>
      <button
        onClick={() => dispatch(removeNotification(id))}
        className="ml-4 text-white hover:text-gray-200 focus:outline-none"
      >
        ×
      </button>
    </motion.div>
  );
};

================
File: src/components/Search/Search.test.tsx
================
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import "@testing-library/jest-dom";
import Search from "./Search";

jest.mock("framer-motion", () => ({
  motion: {
    div: function MockDiv(props: any) {
      const { children, ...rest } = props;
      return React.createElement("div", rest, children);
    },
    li: function MockLi(props: any) {
      const { children, ...rest } = props;
      return React.createElement("li", rest, children);
    },
  },
  AnimatePresence: function MockAnimatePresence(props: any) {
    return React.createElement(React.Fragment, null, props.children);
  },
}));

describe("Search Component", () => {
  const mockOnSelect = jest.fn();
  const defaultProps = {
    onSelect: mockOnSelect,
    placeholder: "Search...",
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("renders with placeholder text", () => {
    render(<Search {...defaultProps} />);
    expect(screen.getByPlaceholderText("Search...")).toBeInTheDocument();
  });

  it("shows loading state while searching", async () => {
    render(<Search {...defaultProps} />);
    const input = screen.getByPlaceholderText("Search...");

    fireEvent.change(input, { target: { value: "react" } });
    expect(screen.getByText("Loading...")).toBeInTheDocument();

    await waitFor(() => {
      expect(screen.queryByText("Loading...")).not.toBeInTheDocument();
    });
  });

  it("displays search results", async () => {
    render(<Search {...defaultProps} />);
    const input = screen.getByPlaceholderText("Search...");

    fireEvent.change(input, { target: { value: "react" } });

    await waitFor(() => {
      expect(screen.getByText("React Basics")).toBeInTheDocument();
      expect(screen.getByText("React Hooks Demo")).toBeInTheDocument();
    });
  });

  it("filters results based on search query", async () => {
    render(<Search {...defaultProps} />);
    const input = screen.getByPlaceholderText("Search...");

    fireEvent.change(input, { target: { value: "typescript" } });

    await waitFor(() => {
      expect(screen.getByText("TypeScript Tutorial")).toBeInTheDocument();
      expect(screen.queryByText("React Basics")).not.toBeInTheDocument();
    });
  });

  it("handles item selection via click", async () => {
    render(<Search {...defaultProps} />);
    const input = screen.getByPlaceholderText("Search...");

    fireEvent.change(input, { target: { value: "react" } });

    await waitFor(() => {
      fireEvent.click(screen.getByText("React Basics"));
    });

    expect(mockOnSelect).toHaveBeenCalledWith(
      expect.objectContaining({
        id: "1",
        title: "React Basics",
        category: "Frontend",
      })
    );
  });

  it("handles keyboard navigation", async () => {
    render(<Search {...defaultProps} />);
    const input = screen.getByPlaceholderText("Search...");

    fireEvent.change(input, { target: { value: "react" } });

    await waitFor(() => {
      expect(screen.getByText("React Basics")).toBeInTheDocument();
    });

    // Press arrow down to focus first item
    fireEvent.keyDown(input, { key: "ArrowDown" });
    expect(screen.getByText("React Basics").parentElement).toHaveClass(
      "bg-blue-50"
    );

    // Press arrow down again to focus second item
    fireEvent.keyDown(input, { key: "ArrowDown" });
    expect(screen.getByText("React Hooks Demo").parentElement).toHaveClass(
      "bg-blue-50"
    );

    // Press enter to select focused item
    fireEvent.keyDown(input, { key: "Enter" });
    expect(mockOnSelect).toHaveBeenCalledWith(
      expect.objectContaining({
        title: "React Hooks Demo",
      })
    );
  });

  it("clears input when clear button is clicked", async () => {
    render(<Search {...defaultProps} />);
    const input = screen.getByPlaceholderText("Search...");

    fireEvent.change(input, { target: { value: "react" } });

    await waitFor(() => {
      const clearButton = screen.getByRole("button");
      fireEvent.click(clearButton);
    });

    expect(input).toHaveValue("");
    expect(mockOnSelect).toHaveBeenCalledWith(null);
  });

  it('shows "No results found" message when no matches', async () => {
    render(<Search {...defaultProps} />);
    const input = screen.getByPlaceholderText("Search...");

    fireEvent.change(input, { target: { value: "nonexistent" } });

    await waitFor(() => {
      expect(screen.getByText("No results found.")).toBeInTheDocument();
    });
  });

  it("closes dropdown when Escape key is pressed", async () => {
    render(<Search {...defaultProps} />);
    const input = screen.getByPlaceholderText("Search...");

    fireEvent.change(input, { target: { value: "react" } });

    await waitFor(() => {
      expect(screen.getByText("React Basics")).toBeInTheDocument();
    });

    fireEvent.keyDown(input, { key: "Escape" });

    expect(screen.queryByText("React Basics")).not.toBeInTheDocument();
  });
});

================
File: src/components/Search/Search.tsx
================
import React, { useEffect, useState, KeyboardEvent } from "react";
import { useDebounce } from "../../hooks/useDebounce";
import { motion, AnimatePresence } from "framer-motion";

type SearchProps = {
  onSelect: (query: SearchResult | null) => void;
  placeholder?: string;
};

export type SearchResult = {
  id: string;
  title: string;
  category: string;
};

const sampleData: SearchResult[] = [
  { id: "1", title: "React Basics", category: "Frontend" },
  { id: "2", title: "TypeScript Tutorial", category: "Language" },
  { id: "3", title: "Frontend Testing", category: "Testing" },
  { id: "4", title: "Redux Guide", category: "State Management" },
  { id: "5", title: "React Hooks Demo", category: "Frontend" },
];

const onSearch = (query: string): SearchResult[] => {
  return sampleData.filter((item) =>
    item.title.toLowerCase().includes(query.toLowerCase())
  );
};
const dropdownVariants = {
  hidden: {
    opacity: 0,
    y: -10,
    transition: {
      duration: 0.2,
    },
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.2,
    },
  },
  exit: {
    opacity: 0,
    y: -10,
    transition: {
      duration: 0.2,
    },
  },
};

const Search = ({ placeholder, onSelect }: SearchProps) => {
  const [query, setQuery] = useState("");
  const [results, setResults] = useState<SearchResult[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isOpen, setIsOpen] = useState(false);
  const [focusedIndex, setFocusedIndex] = useState(-1);

  const debouncedQuery = useDebounce(query, 300);

  useEffect(() => {
    setIsLoading(true);
    setError(null);

    const timeoutId = setTimeout(() => {
      try {
        if (debouncedQuery.trim() === "") {
          setResults([]);
          setIsOpen(false);
        } else {
          const searchResults = onSearch(debouncedQuery);
          setResults(searchResults);
          setIsOpen(true);
          setFocusedIndex(-1);
        }
      } catch (err: any) {
        setError(err.message || "An error occurred.");
        setResults([]);
      } finally {
        setIsLoading(false);
      }
    }, 200);

    return () => clearTimeout(timeoutId);
  }, [debouncedQuery]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(e.target.value);
  };

  const handleSelect = (item: SearchResult) => {
    onSelect(item);
    setQuery("");
    setIsOpen(false);
    setFocusedIndex(-1);
  };

  const clearInput = () => {
    setQuery("");
    setIsOpen(false);
    setFocusedIndex(-1);
    onSelect(null);
  };

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
    if (!isOpen || results.length === 0) return;

    if (e.key === "ArrowUp") {
      e.preventDefault();
      setFocusedIndex((prev) => {
        const newIndex = prev > 0 ? prev - 1 : results.length - 1;
        return newIndex;
      });
    }

    if (e.key === "ArrowDown") {
      e.preventDefault();
      setFocusedIndex((prev) => {
        const newIndex = prev < results.length - 1 ? prev + 1 : 0;
        return newIndex;
      });
    }

    if (e.key === "Enter" && focusedIndex >= 0) {
      handleSelect(results[focusedIndex]);
    }

    if (e.key === "Escape") {
      setIsOpen(false);
      setFocusedIndex(-1);
    }
  };

  return (
    <div className="relative w-full">
      <div className="flex items-center border border-gray-300 rounded-md px-3 py-2 w-full focus-within:border-blue-500 w-96 h-12">
        <input
          type="text"
          placeholder={placeholder}
          value={query}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown}
          className="flex-grow outline-none"
        />
        {query && (
          <button
            onClick={clearInput}
            className="text-gray-500 hover:text-gray-700"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        )}
      </div>

      {isLoading && (
        <div className="mt-2 text-center text-gray-500">Loading...</div>
      )}
      {error && <div className="mt-2 text-center text-red-500">{error}</div>}

      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="absolute w-full"
            initial="hidden"
            animate="visible"
            exit="exit"
            variants={dropdownVariants}
          >
            {results.length > 0 ? (
              <ul className="w-full bg-white border border-gray-200 rounded-md mt-1 shadow-lg z-10">
                {results.map((result, index) => (
                  <motion.li
                    key={result.id}
                    className={`p-2 cursor-pointer text-left transition-colors duration-150 ${
                      index === focusedIndex
                        ? "bg-blue-50 text-blue-700"
                        : "hover:bg-gray-100"
                    }`}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.1 }}
                    onClick={() => handleSelect(result)}
                  >
                    <span className="font-bold">{result.title}</span>
                    <span className="text-gray-500 ml-2">
                      - {result.category}
                    </span>
                  </motion.li>
                ))}
              </ul>
            ) : (
              query.trim() !== "" &&
              !isLoading &&
              !error && (
                <div className="w-full bg-white border border-gray-200 rounded-md mt-1 shadow-lg z-10 p-2 text-center text-gray-500">
                  No results found.
                </div>
              )
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Search;

================
File: src/hooks/useDebounce.tsx
================
import { useEffect, useState } from "react";

export const useDebounce = <T,>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

================
File: src/pages/NotificationPage.tsx
================
import React from "react";
import { useAppDispatch } from "../store/hooks";
import { addNotification } from "../store/notificationSlice";
import { NotificationContainer } from "../components/Notification/NotificationContainer";

const NotificationPage = () => {
  const dispatch = useAppDispatch();

  const showNotification = (type: "success" | "error" | "info") => {
    dispatch(
      addNotification({
        message: `This is a ${type} notification!`,
        type,
      })
    );
  };

  return (
    <div className="min-h-screen p-8">
      <NotificationContainer />
      <div className="flex gap-4">
        <button
          onClick={() => showNotification("success")}
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          Show Success
        </button>
        <button
          onClick={() => showNotification("error")}
          className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
        >
          Show Error
        </button>
        <button
          onClick={() => showNotification("info")}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Show Info
        </button>
      </div>
    </div>
  );
};

export default NotificationPage;

================
File: src/pages/SearchPage.tsx
================
import React, { useState } from "react";
import Search, { SearchResult } from "../components/Search/Search";
import { motion, AnimatePresence } from "framer-motion";

const SearchPage = () => {
  const [selectedItem, setSelectedItem] = useState<SearchResult | null>(null);

  return (
    <div className="min-h-screen flex flex-col">
      <div className="sticky top-0">
        <div className="max-w-4xl mx-auto w-full px-4 py-3">
          <Search placeholder="Type here..." onSelect={setSelectedItem} />
        </div>
      </div>

      <div className="max-w-4xl mx-auto w-full px-4 py-10 mt-40">
        <AnimatePresence mode="wait">
          {selectedItem && (
            <motion.div
              key={selectedItem.id}
              initial={{ opacity: 0, y: 20, scale: 0.95 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: -20, scale: 0.95 }}
              transition={{
                duration: 0.2,
                ease: "easeInOut",
              }}
              className="bg-white rounded-lg p-6 shadow-lg border border-gray-100 hover:shadow-xl transition-shadow duration-300"
            >
              <div className="flex items-center justify-between mb-4">
                <div className="flex-1">
                  <motion.h3
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.1 }}
                    className="text-lg font-semibold text-gray-900 mb-1"
                  >
                    {selectedItem.title}
                  </motion.h3>
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.2 }}
                    className="text-sm text-gray-500"
                  >
                    Category: {selectedItem.category}
                  </motion.div>
                </div>
                <motion.span
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
                  className="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10"
                >
                  {selectedItem.id}
                </motion.span>
              </div>

              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.2 }}
                className="pt-4 border-t border-gray-100"
              >
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => setSelectedItem(null)}
                    className=" flex text-sm text-red-500 hover:text-red-700 transition-colors"
                  >
                    Clear selection
                  </button>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default SearchPage;

================
File: src/store/hooks.ts
================
import { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import type { RootState, AppDispatch } from "./index";

export const useAppDispatch: () => AppDispatch = useDispatch;
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

================
File: src/store/index.ts
================
import { configureStore } from "@reduxjs/toolkit";
import notificationReducer from "./notificationSlice";

export const store = configureStore({
  reducer: {
    notifications: notificationReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

================
File: src/store/notificationSlice.ts
================
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface Notification {
  id: string;
  message: string;
  type: "success" | "error" | "info";
}

interface NotificationState {
  notifications: Notification[];
}

const initialState: NotificationState = {
  notifications: [],
};

export const notificationSlice = createSlice({
  name: "notifications",
  initialState,
  reducers: {
    addNotification: (
      state,
      action: PayloadAction<Omit<Notification, "id">>
    ) => {
      const id = crypto.randomUUID();
      state.notifications.push({ ...action.payload, id });
    },
    removeNotification: (state, action: PayloadAction<string>) => {
      state.notifications = state.notifications.filter(
        (notification) => notification.id !== action.payload
      );
    },
  },
});

export const { addNotification, removeNotification } =
  notificationSlice.actions;
export default notificationSlice.reducer;

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

================
File: src/App.tsx
================
import "./App.css";

import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import SearchPage from "./pages/SearchPage";
import NotificationPage from "./pages/NotificationPage";

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/search" element={<SearchPage />} />
        <Route path="/notification" element={<NotificationPage />} />
      </Routes>
    </Router>
  );
}

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;


:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;


  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;

  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

================
File: src/main.tsx
================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import App from "./App.tsx";
import { Provider } from "react-redux";
import { store } from "./store";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </StrictMode>
);

================
File: src/setupTests.js
================
import "@testing-library/jest-dom/extend-expect";

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: babel.config.cjs
================
module.exports = {
  presets: [
    "@babel/preset-env",
    "@babel/preset-react",
    "@babel/preset-typescript",
  ],
};

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: jest.config.cjs
================
/** @type {import('jest').Config} */
module.exports = {
  preset: "ts-jest",
  testEnvironment: "jsdom",
  setupFilesAfterEnv: ["<rootDir>/jest.setup.ts"],
  moduleNameMapper: {
    "^@/(.*)$": "<rootDir>/src/$1",
  },
  transform: {
    "^.+\\.(ts|tsx)$": [
      "ts-jest",
      {
        tsconfig: {
          jsx: "react-jsx",
          esModuleInterop: true,
          allowSyntheticDefaultImports: true,
        },
      },
    ],
  },
  moduleFileExtensions: ["ts", "tsx", "js", "jsx", "json", "node"],
};

================
File: jest.setup.ts
================
import "@testing-library/jest-dom";

================
File: package.json
================
{
  "name": "nacelle-search",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "jest --config jest.config.cjs"
  },
  "dependencies": {
    "@reduxjs/toolkit": "^2.5.0",
    "framer-motion": "^11.18.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.1.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^14.6.0",
    "@types/jest": "^29.5.14",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@types/testing-library__jest-dom": "^6.0.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.5.1",
    "tailwindcss": "^3.4.17",
    "ts-jest": "^29.2.5",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "allowImportingTsExtensions":true,
    "noEmit": true,
    "jsx": "react-jsx",
    "types": ["jest", "@testing-library/jest-dom"],
    "baseUrl": "src"
  },
  "include": ["src/**/*", "jest.setup.ts"],
  "exclude": ["node_modules"]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: tsconfig.tsbuildinfo
================
{"root":["./src/app.tsx","./src/main.tsx","./src/setuptests.js","./src/vite-env.d.ts","./src/components/notification/notificationcontainer.tsx","./src/components/notification/notificationitem.test.tsx","./src/components/notification/notificationitem.tsx","./src/components/search/search.test.tsx","./src/components/search/search.tsx","./src/hooks/usedebounce.tsx","./src/pages/notificationpage.tsx","./src/pages/searchpage.tsx","./src/store/hooks.ts","./src/store/index.ts","./src/store/notificationslice.ts","./jest.setup.ts"],"version":"5.6.3"}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
